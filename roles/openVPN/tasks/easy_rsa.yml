--- 
# Made for Easy-rsa 3

### Build PKI/Certificate Authority PART ###
- name: EASY-RSA - Check if PKI already exists
  stat:
    path: "{{ lookup('env','HOME') }}/pki"
  register: pki

- name: EASY-RSA - Init PKI if doesn't exist
  command: "{{ easy_rsa_script }} init-pki"
  when: not pki.stat.exists

- name: EASY-RSA - Remove existing PKI and create a new one IF pki_suppr variable is set to yes
  expect:
    command: "{{ easy_rsa_script }} init-pki"
    responses:
      'Confirm removal:': "{{ easy_rsa_pki_suppr }}"
  when: pki.stat.exists and pki_suppr == 'yes'

- name: EASY-RSA - Copy vars template for necessaries CA variables 
  template:
    src: vars.j2
    dest: "{{ easy_rsa_base_path }}/vars"
    owner: root
    group: root
    mode: '0644'
  
- name: EASY-RSA - Check if CA (Certificate Autority) already exists
  stat:
    path: "{{ lookup('env','HOME') }}/pki/ca.crt"
  register: ca

- name: EASY-RSA - Build CA (Certificate Authority) with vars file 
  expect:
    command: "{{ easy_rsa_script }} build-ca"
    responses: 
      'Enter PEM pass phrase:$': "{{ easy_rsa_ca_password }}"
      'Verifying - Enter PEM pass phrase:$': "{{ easy_rsa_ca_password }}"
  when: not ca.stat.exists
  
### Generate server keys ###
- name: EASY-RSA - Generate server keys (crt,req,key)
  expect:
    command: "{{ easy_rsa_script }} build-server-full {{ ansible_hostname }} nopass"
    responses:
      'Enter pass phrase for .*key:$': "{{ easy_rsa_ca_password }}"
    creates: "{{ lookup('env', 'HOME') }}/pki/reqs/{{ ansible_hostname }}.req"

### Security Part: Build Diffie-hellman (For TLS purpose) and HMAC key ###
- name: EASY-RSA - (CAN TAKE TIME) Create Diffie-Hellman pem
  openssl_dhparam:
    path: "{{ openvpn_config_server_path }}/dh.pem"
    size: 2048

- name: EASY-RSA - Verify if HMAC key exists (ta)
  stat:
    path: "{{ lookup('env', 'HOME')}}/pki/ta.key"
  register: hmac

- name: EASY-RSA - Create HMAC Key
  command: "openvpn --genkey --secret {{ lookup('env', 'HOME')}}/pki/ta.key"
  when: not hmac.stat.exists
